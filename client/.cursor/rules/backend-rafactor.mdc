---
description: Migration plan and feature parity checklist for replacing Express backend with Supabase and edge functions
globs: 
alwaysApply: false
---
---
description: Migration plan and feature parity checklist for replacing Express backend with Supabase and edge functions
globs: 
alwaysApply: false
---

# üß± Backend Refactor: Express ‚Üí Supabase

## üéØ Goal

Replace the legacy Express.js backend with Supabase-hosted services while the application is still in development, providing a streamlined architecture with:

- **Database**: Supabase Postgres for LERG data storage
- **Auth**: Supabase Auth with email/password, verification, and password reset
- **APIs**: Supabase Edge Functions with consistent response patterns
- **Storage**: Supabase Storage as needed
- **Admin Controls**: Role-based access for superadmin LERG management

---

## ‚úÖ Existing Functionality To Migrate

| Feature                 | Migration Approach                                          |
|-------------------------|-------------------------------------------------------------|
| CSV Upload & Parsing    | ‚úÖ Retain client-side processing with Dexie                  |
| LERG Upload & Filtering | üîÑ Move to Supabase Edge Function (superadmin only)          |
| Rate Deck Comparison    | ‚úÖ Use client-side Dexie logic with LERG data from Supabase   |
| User Authentication     | üîÑ Replace custom auth with Supabase Auth                    |
| Admin Routes            | üîÑ Implement with Supabase role claims                       |

---

## üîÑ Migration Tasks

### Phase 1: Supabase Project Setup - Core Infrastructure

- [x] Create Supabase project
- [ ] Set up project environment variables
  - [ ] Add Supabase URL and keys to .env
  - [ ] Configure environment in Vite config
- [ ] Configure Supabase Auth
  - [ ] Enable email/password authentication
  - [ ] Configure email templates
  - [ ] Set up password reset flow
  - [ ] Configure redirect URLs
- [ ] Create database schema
  - [ ] Create `lerg_codes` table with proper indexes
  - [ ] Set up Row-Level Security policies
  - [ ] Test database access

### Phase 2: Auth System Implementation

- [ ] Create auth composable
  - [ ] Implement sign up functionality
  - [ ] Implement login functionality
  - [ ] Implement password reset
  - [ ] Add session persistence
- [ ] Implement role management
  - [ ] Manually assign superadmin role to primary account
  - [ ] Add role check utilities
  - [ ] Create protected route guards based on roles
- [ ] Update UI components
  - [ ] Create/update login form
  - [ ] Create/update registration form
  - [ ] Add password reset UI

### Phase 3: Edge Function Development

- [ ] Set up Edge Function development environment
  - [ ] Install Supabase CLI
  - [ ] Configure local development
- [ ] Create edge functions with consistent { data, error } response pattern
  - [ ] `uploadLerg` - Handle LERG CSV upload (superadmin only)
    - [ ] Implement file validation
    - [ ] Implement role verification
    - [ ] Process and store LERG data
  - [ ] `getLergMeta` - Provide version info about current LERG data
    - [ ] Return latest update timestamp
    - [ ] Return record count
  - [ ] `pingStatus` - Health check endpoint
    - [ ] Implement simple status check
- [ ] Deploy and test edge functions
  - [ ] Deploy to production environment
  - [ ] Verify access controls

### Phase 4: Client-Side Integration

- [ ] Create Supabase client utility
  - [ ] Set up connection with proper error handling
  - [ ] Implement request/response interceptors
- [ ] Implement LERG data sync
  - [ ] Create download function to pull LERG data on login
  - [ ] Store in IndexedDB for offline access
  - [ ] Add visual indicators for sync status
- [ ] Update API service
  - [ ] Replace Express endpoints with Supabase client calls
  - [ ] Update response handling for { data, error } pattern
  - [ ] Add retry logic for network failures

### Phase 5: Testing & Cleanup

- [ ] Manual testing of key workflows
  - [ ] LERG data download and storage
  - [ ] Authentication flows
  - [ ] Rate deck comparison with new data source
  - [ ] Superadmin-only functions
- [ ] Remove Express backend
  - [ ] Delete `/server` folder
  - [ ] Remove Express dependencies
  - [ ] Update README and documentation
  - [ ] Clean up unused code and imports
- [ ] Update build and deployment scripts
  - [ ] Remove Express startup scripts
  - [ ] Add Supabase Edge Function deployment to CI/CD

---

## üß© Edge Function Design

| Function Name   | Purpose                                           | Access Level      |
|-----------------|---------------------------------------------------|-------------------|
| `uploadLerg`    | Process and store LERG CSV data                   | Superadmin only   |
| `getLergMeta`   | Return version and statistics about LERG dataset  | Authenticated     |
| `pingStatus`    | Simple health check endpoint                      | Public            |

All edge functions will:
- Use the `{ data, error }` response format
- Include appropriate HTTP status codes
- Validate authentication via JWT
- Include error handling

---

## üîê Supabase Security Configuration

- **Row-Level Security Policies**:
  - `lerg_codes`: Read-only for authenticated users, write for superadmin
  - User data: Protected by default Supabase Auth policies

- **API Security**:
  - Edge functions secured by JWT verification
  - WAF protection with geofenced IP restrictions already in place
  - No additional rate limiting needed for initial deployment (Free tier)

---

## üìù Implementation Notes

- This migration is for a pre-production application, allowing for direct replacement rather than parallel systems
- Free Supabase tier is sufficient for current needs (<1000 users)
- Manual testing is appropriate for the current development phase
- Frontend already handles most validation, with edge functions providing a secondary validation layer
- Initially only one superadmin user with manually-assigned role
- Data is processed client-side with IndexedDB, minimizing Supabase database load
- Existing frontend code for CSV processing can be retained