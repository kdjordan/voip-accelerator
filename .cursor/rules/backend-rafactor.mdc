---
description: 
globs: 
alwaysApply: false
---
---
description: Migration plan and feature parity checklist for replacing Express backend with Supabase and edge functions
globs:
  - "**/*.ts"
alwaysApply: false
---

# 🧱 Backend Refactor: Express → Supabase

## 🎯 Goal

Migrate core backend functionality from Express to Supabase, focusing first on Supabase Edge Functions for LERG data flow and health checks. Authentication and access control will follow in a later phase.

---

## ✅ Phase 1: Supabase Function Deployment (No Auth Yet)

- [x] ⬆️ Deploy `upload-lerg` edge function
- [x] ⬆️ Deploy `get-lerg-data` edge function
- [x] ✅ `ping-status` already deployed
- [x] 🗑️ Delete `hello-world` edge function from Supabase dashboard
- [x] 🧹 Remove `hello-world` folder locally (`/supabase/functions/hello-world`)
- [x] 🔍 Add `console.log` statements for debugging in `upload-lerg`
- [x] 🔍 Add `console.log` statements for debugging in `get-lerg-data`
- [x] ✅ Verify local function testing with `supabase functions serve`
- [x] ✅ Run `supabase functions deploy upload-lerg`
- [x] ✅ Run `supabase functions deploy get-lerg-data`

---

## 🔗 Phase 2: Client Integration

- [ ] 🔁 Replace old `/upload/lerg` client call with `upload-lerg` function
- [ ] 🔁 Replace LERG meta fetch (if any) with `get-lerg-data`
- [ ] 💾 Use Dexie to store downloaded LERG data from `get-lerg-data`
- [ ] ⚠️ Add error handling and response checks for `{ data, error }` pattern
- [ ] ✅ Validate LERG CSV format in frontend before uploading

---

## 🌐 Phase 3: Ping Status Integration

- [ ] 🔄 Use `ping-status` in components that need backend health status
- [ ] 🔄 Add retry/fallback logic in client if ping fails
- [ ] ✅ Confirm ping function returns `{ data: { status: 'ok' } }`

---

## 🗂️ Phase 4: Supabase Schema & RLS Prep

- [ ] 📦 Create `lerg_codes` table in Supabase
- [ ] 🔍 Add indexes on `npa`, `nxx`, and `ocn` (or equivalent fields)
- [ ] 🚧 Add row-level security policy (read-only for now)
- [ ] 🧪 Verify manual insert via Supabase Studio
- [ ] ✅ Add `last_updated` column for syncing logic later

---

## 🧠 Phase 5: Deferred (Auth + Roles)

_(To be tackled after LERG + Edge pipeline is working well)_

- [ ] 🔒 Set up Supabase Auth (email/password)
- [ ] 🎭 Create `superadmin` role and assign to your account
- [ ] 🛡️ Add role check to `upload-lerg` edge function
- [ ] 🔐 Lock `get-lerg-data` behind authenticated users
- [ ] 🔄 Update frontend to support login/session/token

---

## 🧼 Phase 6: Cleanup & Docs

- [ ] 🧹 Remove `/server` folder and all Express code
- [ ] 🧹 Delete unused middleware/utilities from project
- [ ] 🧼 Update README.mdc to reflect Supabase-only setup
- [ ] 🧪 Smoke test all flows:
  - [ ] Upload CSV via `upload-lerg`
  - [ ] Download and parse via `get-lerg-data`
  - [ ] Use Dexie to store and read
  - [ ] `ping-status` integrated in client
- [ ] 🏁 Remove Express from `dev` and `build` scripts

---

## 📝 Notes

- Dexie remains the primary client-side DB
- All edge functions follow `{ data, error }` format
- Auth will be minimal or disabled for now to allow dev freedom
- Add console logs in Supabase Edge Functions during early testing
